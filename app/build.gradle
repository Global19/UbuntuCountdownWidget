buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}


def getVersionCode = {
    try {
        return Integer.parseInt('git rev-list --first-parent --count HEAD'.execute().text.trim())
    }
    catch (ignored) {
        return -1;
    }
}

def getVersionName = {
    try {
        def tagName = 'git describe --abbrev=0 --tags'.execute().text.trim()
        def tagHash = 'git rev-list --tags --max-count=1'.execute().text.trim()
        def commitCount = Integer.parseInt(('git rev-list --count ' + tagHash + '..HEAD').execute().text.trim())

        if (commitCount > 0) {
            return String.format("%s.%d", tagName, commitCount)
        } else {
            return tagName
        }
    }
    catch (ignored) {
        return null;
    }
}

android {
    compileSdkVersion COMPILE_SDK_VERSION as int
    buildToolsVersion BUILD_TOOLS_VERSION as String

    defaultConfig {
        applicationId "com.leinardi.ubuntucountdownwidget"
        minSdkVersion MIN_SDK_VERSION as int
        targetSdkVersion TARGET_SDK_VERSION as int
        versionCode getVersionCode() + 200
        versionName getVersionName()
    }

    flavorDimensions "licenseVersion"

    productFlavors {
        standard {
            dimension "licenseVersion"
        }
        foss {
            dimension "licenseVersion"
            applicationIdSuffix ".foss"
            versionName getVersionName() + "-foss"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    def isKeystoreInfoAvailable = file(KEYSTORE_PATH).exists() && file(KEYSTORE_PROPERTIES_PATH).exists()

    signingConfigs {
        if (isKeystoreInfoAvailable) {
            release {
                Properties props = new Properties()
                props.load(new FileInputStream(file(KEYSTORE_PROPERTIES_PATH)))
                storeFile file(KEYSTORE_PATH)
                storePassword props['store.password']
                keyAlias props['key.alias']
                keyPassword props['key.password']
            }
        }
    }

    buildTypes {
        if (isKeystoreInfoAvailable) {
            release {
                minifyEnabled true
                shrinkResources true
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.release
            }
        }
    }

    // It would be better to fix the issues
    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:support-v4:' + SUPPORT_LIBRARIES_VERSION
    compile 'com.android.support:appcompat-v7:' + SUPPORT_LIBRARIES_VERSION
    compile 'com.android.support:design:' + SUPPORT_LIBRARIES_VERSION
    compile 'com.android.support:preference-v7:' + SUPPORT_LIBRARIES_VERSION
    compile 'com.android.support:preference-v14:' + SUPPORT_LIBRARIES_VERSION
    compile 'com.github.gabrielemariotti.changeloglib:changelog:2.1.0'
    standardCompile('com.crashlytics.sdk.android:crashlytics:2.6.0@aar') {
        transitive = true;
    }
}
