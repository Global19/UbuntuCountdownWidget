/*
 * Ubuntu Countdown Widget
 * Copyright (C) 2020 Roberto Leinardi
 *
 * This program is free software: you can redistribute it and/or modify it under the terms
 * of the GNU General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this
 * program.  If not, see <http://www.gnu.org/licenses/>.
 */

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

}
apply plugin: 'com.android.application'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}


def getVersionName = {
    try {
        def tagName = 'git describe --abbrev=0 --tags'.execute().text.trim()
        def tagHash = 'git rev-list --tags --max-count=1'.execute().text.trim()
        def commitCount = Integer.parseInt(('git rev-list --count ' + tagHash + '..HEAD').execute().text.trim())

        if (commitCount > 0) {
            return String.format("%s.%d", tagName, commitCount)
        } else {
            return tagName
        }
    }
    catch (ignored) {
        return null
    }
}

android {
    compileSdkVersion build_versions.target_sdk

    defaultConfig {
        applicationId "com.leinardi.ubuntucountdownwidget"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode build_versions.version_code
        versionName getVersionName()
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    def isKeystoreInfoAvailable = file(KEYSTORE_PATH).exists() && file(KEYSTORE_PROPERTIES_PATH).exists()

    signingConfigs {
        if (isKeystoreInfoAvailable) {
            release {
                Properties props = new Properties()
                props.load(new FileInputStream(file(KEYSTORE_PROPERTIES_PATH)))
                storeFile file(KEYSTORE_PATH)
                storePassword props['store.password']
                keyAlias props['key.alias']
                keyPassword props['key.password']
            }
        }
    }

    buildTypes {
        if (isKeystoreInfoAvailable) {
            release {
                minifyEnabled true
                shrinkResources true
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.release
            }
        }
    }

    // It would be better to fix the issues
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:support-v4:' + SUPPORT_LIBRARIES_VERSION
    implementation 'com.android.support:appcompat-v7:' + SUPPORT_LIBRARIES_VERSION
    implementation 'com.android.support:design:' + SUPPORT_LIBRARIES_VERSION
    implementation 'com.android.support:preference-v7:' + SUPPORT_LIBRARIES_VERSION
    implementation 'com.android.support:preference-v14:' + SUPPORT_LIBRARIES_VERSION
    implementation 'com.github.gabrielemariotti.changeloglib:changelog:2.1.0'
}
